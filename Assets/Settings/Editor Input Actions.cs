//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Editor Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EditorInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EditorInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Editor Input Actions"",
    ""maps"": [
        {
            ""name"": ""Editor"",
            ""id"": ""80436fa2-b985-4e80-8c3f-62442cd3c3cf"",
            ""actions"": [
                {
                    ""name"": ""SwitchFullscreenMode"",
                    ""type"": ""Button"",
                    ""id"": ""9535087b-c63f-42e6-a76c-cb6f7fa6ae03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestButton"",
                    ""type"": ""Button"",
                    ""id"": ""5fde0872-3b15-46b5-b444-caeba3a3cd71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""7790bbf5-dce2-491a-a3e5-17d3b5800319"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchFullscreenMode"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""3d62f9cf-3c86-4c02-9031-9c8130f1b119"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchFullscreenMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""d4d467bb-de41-4c62-8624-b221af9ac884"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchFullscreenMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""541a6f3e-d505-472a-a962-a20981a144aa"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Editor
        m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
        m_Editor_SwitchFullscreenMode = m_Editor.FindAction("SwitchFullscreenMode", throwIfNotFound: true);
        m_Editor_TestButton = m_Editor.FindAction("TestButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Editor
    private readonly InputActionMap m_Editor;
    private IEditorActions m_EditorActionsCallbackInterface;
    private readonly InputAction m_Editor_SwitchFullscreenMode;
    private readonly InputAction m_Editor_TestButton;
    public struct EditorActions
    {
        private @EditorInputActions m_Wrapper;
        public EditorActions(@EditorInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchFullscreenMode => m_Wrapper.m_Editor_SwitchFullscreenMode;
        public InputAction @TestButton => m_Wrapper.m_Editor_TestButton;
        public InputActionMap Get() { return m_Wrapper.m_Editor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
        public void SetCallbacks(IEditorActions instance)
        {
            if (m_Wrapper.m_EditorActionsCallbackInterface != null)
            {
                @SwitchFullscreenMode.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnSwitchFullscreenMode;
                @SwitchFullscreenMode.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnSwitchFullscreenMode;
                @SwitchFullscreenMode.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnSwitchFullscreenMode;
                @TestButton.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnTestButton;
                @TestButton.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnTestButton;
                @TestButton.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnTestButton;
            }
            m_Wrapper.m_EditorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchFullscreenMode.started += instance.OnSwitchFullscreenMode;
                @SwitchFullscreenMode.performed += instance.OnSwitchFullscreenMode;
                @SwitchFullscreenMode.canceled += instance.OnSwitchFullscreenMode;
                @TestButton.started += instance.OnTestButton;
                @TestButton.performed += instance.OnTestButton;
                @TestButton.canceled += instance.OnTestButton;
            }
        }
    }
    public EditorActions @Editor => new EditorActions(this);
    public interface IEditorActions
    {
        void OnSwitchFullscreenMode(InputAction.CallbackContext context);
        void OnTestButton(InputAction.CallbackContext context);
    }
}
